module stdlib;

import c2 local;

type Div_t struct {
    c_int quot;
    c_int rem;
} @(cname="div_t")

type Ldiv_t struct {
    c_long quot;
    c_long rem;
} @(cname="Ldiv_t")

const c_int RAND_MAX = 2147483647;      // same as Int32_max

const i8 EXIT_FAILURE = 1;
const i8 EXIT_SUCCESS = 0;

func void* calloc(c_size count, c_size size);
func void* malloc(c_size size);
func void* realloc(void* ptr, c_size size);
//func void* reallocf(void* ptr, c_size size);
func void* valloc(c_size size);
func void free(void* ptr);

func c_double atof(const c_char* nptr);
func c_int atoi(const c_char* nptr);
func c_long atol(const c_char* nptr);
func c_longlong atoll(const c_char* nptr);

func c_double strtod(const c_char* nptr, c_char** endptr);
func c_float strtof(const c_char* nptr, c_char** endptr);
// NOTE returns long double (16 bytes, bah!)
//func c_longdouble strtold(const c_char* nptr, c_char** endptr);
func c_long strtol(const c_char* nptr, c_char** endptr, c_int base);
func c_ulong strtoul(const c_char* nptr, c_char** endptr, c_int base);
func c_longlong strtoq(const c_char* nptr, c_char** endptr, c_int base);
func c_ulonglong strtouq(const c_char* nptr, c_char** endptr, c_int base);
func c_longlong strtoll(const c_char* nptr, c_char** endptr, c_int base);
func c_ulonglong strtoull(const c_char* nptr, c_char** endptr, c_int base);

func c_char* l64a(c_long n);
func c_long a64l(const c_char* s);

func c_long random();
func void srandom(c_uint __seed);
func c_char* initstate(c_uint __seed, c_char* __statebuf, c_size __statelen);
func c_char* setstate(c_char* __statebuf);

type Random_data struct {} @(opaque, cname="random_data")

func c_int random_r(Random_data* __buf, c_int* __result);
func c_int srandom_r(c_uint __seed, Random_data* __buf);
func c_int initstate_r(c_uint __seed, c_char* __statebuf, c_size __statelen, Random_data* __buf);
func c_int setstate_r(c_char* __statebuf, Random_data* __buf);
func c_int rand();
func void srand(c_uint __seed);
func c_int rand_r(c_uint* __seed);
func c_double drand48();
func c_double erand48(u16* __xsubi);
func c_long lrand48();
func c_long nrand48(u16* __xsubi);
func c_long mrand48();
func c_long jrand48(u16* __xsubi);
func void srand48(c_long __seedval);
func u16* seed48(u16* __seed16v);
func void lcong48(u16* __param);

type Drand48_data struct {} @(opaque, cname="drand48_data")

func c_int drand48_r(Drand48_data* __buffer, c_double* __result);
func c_int erand48_r(u16* __xsubi, Drand48_data* __buffer, c_double* __result);
func c_int lrand48_r(Drand48_data* __buffer, c_long* __result);
func c_int nrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);
func c_int mrand48_r(Drand48_data* __buffer, c_long* __result);
func c_int jrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);
func c_int srand48_r(c_long __seedval, Drand48_data* __buffer);
func c_int seed48_r(u16* __seed16v, Drand48_data* __buffer);
func c_int lcong48_r(u16* __param, Drand48_data* __buffer);

func c_int posix_memalign(void** __memptr, c_size __alignment, c_size __size);
func void* aligned_alloc(c_int __alignment, c_size __size);

func void abort();
type AtExitFn func void();
func c_int atexit(AtExitFn __func);
func c_int at_quick_exit(AtExitFn __func);
type OnExitFn func void(c_int, void*);
func c_int on_exit(OnExitFn __func, void* __arg);
func void exit(c_int __status);
func void quick_exit(c_int __status);
func void _Exit(c_int __status);

func c_char* getenv(const c_char* __name);
func c_int putenv(c_char* __string);
func c_int setenv(const c_char* __name, const c_char* __value, c_int __replace);
func c_int unsetenv(const c_char* __name);
func c_int clearenv();

func c_int mkstemp(c_char* __template);
func c_int mkstemps(c_char* __template, c_int __suffixlen);
func c_char* mkdtemp(c_char* __template);
func c_int system(const c_char* __command);
func c_char* realpath(const c_char* __name, c_char* __resolved);
func c_char* mktemp(c_char* __template);

type CompareFn func c_int(const void*, const void*) @(cname="__compar_fn_t");
func void* bsearch(const void* __key, const void* __base, c_size __nmemb, c_size __size, CompareFn __compar);
func void qsort(void* __base, c_size __nmemb, c_size __size, CompareFn __compar);

func c_int abs(c_int __x);
func c_long labs(c_long __x);
func Div_t div(c_int __numer, c_int __denom);
func Ldiv_t ldiv(c_long __numer, c_long __denom);

func c_char* ecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
func c_char* fcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
func c_char* gcvt(c_double __value, c_int __ndigit, c_char* __buf);
func c_char* qecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
func c_char* qfcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
func c_char* qgcvt(c_double __value, c_int __ndigit, c_char* __buf);
func c_int ecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
func c_int fcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
func c_int qecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
func c_int qfcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);

func c_int mblen(const c_char* __s, c_size __n);
func c_int mbtowc(c_int* __pwc, const c_char* __s, c_size __n);
// needs wchar_t
//func c_int wctomb(c_char* __s, c_int __wc_char);
func c_int mbstowcs(c_int* __pwcs, const c_char* __s, c_size __n);
func c_int wcstombs(c_char* __s, const c_int* __pwcs, c_size __n);
func c_int rpmatch(const c_char* __response);
// TODO need to parse c_char* const*
//func c_int getsubopt(c_char** __optionp, c_char*const* __tokens, c_char** __valuep);
func c_int getsubopt(c_char** __optionp, c_char** __tokens, c_char** __valuep);
func c_int getloadavg(c_double* __loadavg, c_int __nelem);

