module test;
//import c2 local;

type foo2 foo;

type gog enum i32 {
   Brog,
   Trog,
   Trodg = 23,
   Brol

}

type fekeo i32;


const i32 FAZ = 1;
const i32 BAR = FAZ + FAZ;
const i32 FOO = BAR * 3;

type foo struct
{
  i32[2] a;
  union {
    i32 b;
  }
  union foo {
    i32 a;
  }
}

type kex struct
{
    struct foo {
    i32 er;
    }
    struct faz {
        i32 x;
        kex rec;
    }
}


type ebor struct
{

    struct foo {
    i32 er;
    }
    struct faz {
        i32 x;
        kex rec;
    }
}

public func i32 main(i32 xwok) @(foo = 1 + 2) {

f64 ef = 1 + 0.023;
if (ef > 1.0)
{
    ef = ef + 1;
    }
    else {}

    i8[FOO] buf;
    i8[10 + 1] buffer2;
    i32 a = 21 + cast(21, i32);
    i32 b = 10;
    i64 c = 38;
    u64 dd = ~cast(21, u16);
    u64 ex = ~dd;
    bool d = false;
    (d ? a : b) = 10;
    do {

      b = b + 1;
      return 1;
    } while (d);

    if (true)
    {
        b = 11;
    }
    else
    {
       c = 12;
       return 1;
    }

    bool e = true;
//    const u8* name = "bas";
    while (e)
{
 i32 x = 0;
 x = x + 1;
 x = x + 2;
}
a = 2;
 //   const i32 A2 = 20;
    //volatile i32* b2 = 0x2000;


    return 0;
}

