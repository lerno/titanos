module snake;

import stdio as io;
import string local;

#define ANSI_BLACK    "\033[0;30m"
#define ANSI_RED      "\033[0;31m"
#define ANSI_GREEN    "\033[0;32m"
#define ANSI_YELLOW   "\033[0;33m"
#define ANSI_BLUE     "\033[0;34m"
#define ANSI_MAGENTA  "\033[0;35m"
#define ANSI_CYAN     "\033[0;36m"
#define ANSI_GREY     "\033[0;37m"
#define ANSI_DARKGREY "\033[01;30m"
#define ANSI_BRED     "\033[01;31m"
#define ANSI_BGREEN   "\033[01;32m"
#define ANSI_BYELLOW  "\033[01;33m"
#define ANSI_BBLUE    "\033[01;34m"
#define ANSI_BMAGENTA "\033[01;35m"
#define ANSI_BCYAN    "\033[01;36m"
#define ANSI_WHITE    "\033[01;37m"
#define ANSI_NORMAL   "\033[0m"

type Coor struct {
    i8 x;
    i8 y;
    u8 flags;
}

type Piece struct {
    Coor[4] side1;
    Coor[4] side2;
}

type FieldStatus enum i8 {
    Free = 0,
    Blocked,
    Taken,    // + index of piece
}

type Field struct {
#if 0
    FieldStatus status : 2;
    u32 piece_id : 4;
    u32 flags : 3;
    u32 expected : 3;  // set by other pieces
#endif
    FieldStatus status;
    u8 piece_id;
    u8 flags;
    u8 expected;  // set by other pieces
}

type Flags enum i8 {
    North = 1,
    East  = 2,
    South = 3,
    West  = 4,
    Head  = 5,
    Tail  = 6,
}

type Board struct {
    Field[5*5] fields;
    bool haveHead;
    bool haveTail;
}

type Option struct {
    Coor[4] parts;
}

Piece[] pieces = {
    { // Hollow piece
        .side1 = { { 0, 0, 0 } },
        .side2 = { { 0, 0, 0 } },
    },
    { // S-shaped
        .side1 = { { 0, 0, 0 }, { 0, 1, Flags.North }, { 1, 1, Flags.South }, { 1, 2, 0 } },
        .side2 = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 1, Flags.West }, { 2, 1, Flags.South } },
    },
    { // L-shaped
        .side1 = { { 0, 0, 0 }, { 0, 1 , 0 }, { 0, 2, Flags.North }, { 1, 0, Flags.East } },
        .side2 = { { 0, 0, 0 }, { 1, 0 , 0 }, { 1, 1, 0 }, { 1, 2, 0 } }
    },
    { // L-shaped, head
        .side1 = { { 0, 0, 0 }, { 0, 1, 0 }, { 0, 2, 0 }, { 1, 0, 0 } },
        .side2 = { { 0, 0, Flags.North }, { 1, 0 , 0 }, { 1, 1, 0 }, { 1, 2, Flags.Head } }
    },
    { // 3 1-side empty
        .side1 = { { 0, 0, 0 }, { 0, 1, 0 }, { 1, 0, 0 } },
        .side2 = { { 0, 0, 0 }, { 0, 1, Flags.East }, { 1, 0, Flags.East } },
    },
    { // 3 2-tails
        .side1 = { { 0, 0, Flags.West }, { 0, 1, Flags.Tail }, { 1, 0, 0 } },
        .side2 = { { 0, 0, Flags.South }, { 0, 1, 0 }, { 1, 0, Flags.Tail } },
    },
    { // I-shaped, 3-straight
        .side1 = { { 0, 0, Flags.South }, { 0, 1, 0 }, { 0, 2, Flags.Head } },
        .side2 = { { 0, 0, Flags.South }, { 0, 1, 0 }, { 0, 2, Flags.West } },
    },
    { // I-shaped, 2 long
        .side1 = { { 0, 0, Flags.West }, { 0, 1, Flags.North } },
        .side2 = { { 0, 0, 0 }, { 0, 1, 0 } },
    },
}
Option[NumOptions][NumPieces] options;
const i32 NumPieces = elemsof(pieces);
const i32 NumOptions = 8;

type PositionType enum i8 {
    Free = 0, // not placed yet
    Setup,    // placed by initial setup
    Placed,   // placed during search
}

type Position struct {
    PositionType postype;
    i8 option;
    i8 x;
    i8 y;
}

const Position[] Setup = {
    [0] = { PositionType.Setup, 0, 1, 4 },
}


func Coor Coor.rotate(const Coor* input, u32 rotation) {
    i8 x = input.x;
    i8 y = input.y;
    i8 t;
    switch (rotation) {
    case 0: // nothing to do
        break;
    case 1: // 90 degrees right
        t = x;
        x = y;
        y = -t;
        break;
    case 2: // 180 degrees right
        x = -x;
        y = -y;
        break;
    case 3: // 270 degrees right
        t = x;
        x = -y;
        y = t;
        break;
    }
    u8 flags = input.flags;  // keep Flags.Head/Flags.Tail, rotate NESW
    if (rotation > 0 && flags >= Flags.North && flags <= Flags.West) {
        flags += rotation;
        if (flags > 4) flags -= 4;
    }

    Coor result = { x, y, flags }
    return result;
}

// calculate all rotations + flipped rotations
func void calculate_rotations() {
    memset(options, 0, sizeof(options));
    for (u32 p=0; p<NumPieces; p++) {
        const Piece* pp = &pieces[p];
        for (u32 o=0; o<4; o++) {  // 4 rotations
            Option* o1 = &options[o][p];
            for (u32 i=0; i<4; i++) {  // side1
                Coor c = pp.side1[i];
                if (i != 0 && c.x == 0 && c.y == 0) break;
                o1.parts[i] = c.rotate(o);
            }
            Option* o2 = &options[o+4][p];
            for (u32 i=0; i<4; i++) {  // side2
                Coor c = pp.side2[i];
                if (i != 0 && c.x == 0 && c.y == 0) break;
                o2.parts[i] = c.rotate(o);
            }
        }
    }
}

func void Board.set(Board* b, i32 x, i32 y, Field field) {
    b.fields[x + y * 5] = field;
}

func Field Board.get(Board* b, i32 x, i32 y) {
    return b.fields[x + y * 5];
}

func void Board.clearflags(Board* b, i32 x, i32 y) {
    b.fields[x + y * 5].expected = 0;
}

func void Board.setExpected(Board* b, i32 x, i32 y, u8 side) {
    b.fields[x + y * 5].expected = side;
}

func void Board.init(Board* b) {
    Field f;
    f.status = FieldStatus.Free;
    f.piece_id = 0;
    f.flags = 0;
    f.expected = 0;
    for (i32 y=0; y<5; y++) {
        for (i32 x=0; x<5; x++) {
            b.set(x, y, f);
        }
    }
    f.status = FieldStatus.Blocked;
    b.set(0, 4, f);
    b.haveHead = 0;
    b.haveTail = 0;
}

func char flags2char(i32 flags) {
    char f = ' ';
    switch (flags) {
    case Flags.North:
        f = 'N';
        break;
    case Flags.East:
        f = 'E';
        break;
    case Flags.South:
        f = 'S';
        break;
    case Flags.West:
        f = 'W';
        break;
    case Flags.Head:
        f = 'H';
        break;
    case Flags.Tail:
        f = 'T';
        break;
    }
    return f;
}

func void Board.print(Board* b) {
    char[1024] buffer;
    memset(buffer, 0, sizeof(buffer));
    char* cp = buffer;
    cp += io.sprintf(cp, "Board: Head=%d  Tail=%d\n", b.haveHead, b.haveTail);
    for (i32 y=4; y>=0; y--) {
        cp += io.sprintf(cp, "---------------------\n");
        for (i32 x=0; x<5; x++) {
            *cp++ = '|';
            Field field = b.fields[x + y * 5];
            switch (field.status) {
            case FieldStatus.Free:
                if (field.expected) {
                    cp += io.sprintf(cp, ANSI_RED"%c"ANSI_NORMAL, flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                *cp++ = ' ';
                *cp++ = ' ';
                break;
            case FieldStatus.Blocked:
                cp += io.sprintf(cp, ANSI_DARKGREY"XXX"ANSI_NORMAL);
                break;
            default:
            {
                i32 flags = field.flags;
                if (field.expected) {
                    cp += io.sprintf(cp, ANSI_RED"%c"ANSI_NORMAL, flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                cp += io.sprintf(cp, ANSI_GREEN"%c", '0' + field.piece_id);
                *cp++ = flags2char(flags);
                cp += io.sprintf(cp, ANSI_NORMAL);
                break;
            }
            }
        }
        *cp++ = '|';
        *cp++ = '\n';
    }
    cp += io.sprintf(cp, "---------------------\n");
    *cp = 0;
    io.puts(buffer);
}

func i32 Board.check_fault(Board* b, i32 xx, i32 yy, i32 expect) {
    Field f = b.get(xx, yy);
    switch (f.status) {
    case FieldStatus.Free:
        if (f.expected && f.expected != expect) return 1;
        break;
    case FieldStatus.Blocked:
        return 1;
    case FieldStatus.Taken:
        if (f.flags != expect) return 1;
        break;
    }
    return 0;
}

// return 0=OK, 1=Not OK
func i32 Board.try_option(Board* b, const Option* pp, i32 x, i32 y) {
    for (u32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) return 0;    // ignore unused parts
        i32 xx = x + c.x;
        if (xx < 0 || xx > 4) return 1;
        i32 yy = y + c.y;
        if (yy < 0 || yy > 4) return 1;
        Field f = b.get(xx, yy);
        if (f.status != FieldStatus.Free) return 1;
        if (f.expected != 0 && f.expected != c.flags) return 1;
        switch (c.flags) {
        case Flags.North:
            if (yy == 4) return 1;
            if (b.check_fault(xx, yy+1, Flags.South)) return 1;
            break;
        case Flags.East:
            if (xx == 4) return 1;
            if (b.check_fault(xx+1, yy, Flags.West)) return 1;
            break;
        case Flags.South:
            if (yy == 0) return 1;
            if (b.check_fault(xx, yy-1, Flags.North)) return 1;
            break;
        case Flags.West:
            if (xx == 0) return 1;
            if (b.check_fault(xx-1, yy, Flags.East)) return 1;
            break;
        case Flags.Head:
            if (b.haveHead) return 1;
            break;
        case Flags.Tail:
            if (b.haveTail) return 1;
            break;
        }
    }
    return 0;
}

func void Board.add(Board* b, const Option* pp, i32 x, i32 y, u8 id) {
    for (u32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) break;
        i32 xx = x + c.x;
        i32 yy = y + c.y;
        Field field = b.get(xx, yy);
        //assert(field.status == FieldStatus.Free);
        field.status = FieldStatus.Taken;
        field.piece_id = id;
        field.flags = c.flags;
        b.set(xx, yy, field);
        switch (c.flags) {
        case Flags.North:
            b.setExpected(xx, yy+1, Flags.South);
            break;
        case Flags.East:
            b.setExpected(xx+1, yy, Flags.West);
            break;
        case Flags.South:
            field.flags = Flags.North;
            b.setExpected(xx, yy-1, Flags.North);
            break;
        case Flags.West:
            b.setExpected(xx-1, yy, Flags.East);
            break;
        case Flags.Head:
            b.haveHead = 1;
            break;
        case Flags.Tail:
            b.haveTail = 1;
            break;
        }
    }
}

func void Board.rem(Board* b, const Option* pp, i32 x, i32 y) {
    for (u32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) break;
        i32 xx = x + c.x;
        i32 yy = y + c.y;
        Field field = b.get(xx, yy);
        field.status = FieldStatus.Free;
        field.piece_id = 0;
        field.flags = 0;
        b.set(xx, yy, field);
        switch (c.flags) {
        case Flags.North:
            b.clearflags(xx, yy+1);
            break;
        case Flags.East:
            b.clearflags(xx+1, yy);
            break;
        case Flags.South:
            b.clearflags(xx, yy-1);
            break;
        case Flags.West:
            b.clearflags(xx-1, yy);
            break;
        case Flags.Head:
            b.haveHead = 0;
            break;
        case Flags.Tail:
            b.haveTail = 0;
            break;
        }
    }
}

u32 found;
u64 tried;
func void Board.try_piece(Board* b, u8 p) {
    if (p == NumPieces) {
        found++;
        io.printf("Found solution %u\n", found);
        b.print();
        return;
    }
    if (Setup[p].postype == PositionType.Setup) {
        i32 o = Setup[p].option;
        i32 x = Setup[p].x;
        i32 y = Setup[p].y;
        if (b.try_option(&options[o][p], x, y)) {
            io.printf("invalid setup: piece %d, option %d at %d,%d\n", p, o, x, y);
            return;
            //exit(-1);
        }
        b.add(&options[o][p], x, y, p);
        b.try_piece(p+1);
    }
    for (i32 y=4; y>=0; y--) {
        for (i32 x=0; x<5; x++) {
            Field f = b.get(x, y);
            if (f.status != FieldStatus.Free) continue;
            for (u32 o=0; o<NumOptions; o++) {
                if (!b.try_option(&options[o][p], x, y)) {
                    b.add(&options[o][p], x, y, p);
                    b.try_piece(p+1);
                    b.rem(&options[o][p], x, y);
                }
                tried++;
                if (p==0) break;
            }
        }
    }
}

public func i32 main() {
    calculate_rotations();

    Board board;
    board.init();
    board.try_piece(0);

    io.printf("%luM tries, found %d solutions\n", tried/1000000, found);
    return 0;
}

