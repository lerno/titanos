module type_test;

import utils;

// -- Base types --
public type Number i32;
public type String const u8*;

// -- pointer types --
type PNum i32*;
type PPNum i32**;
type Pnum2 volatile Number*;

// -- array types --
type IntArr i32[20];
type IntArrArr i32[5][5];
type PArr i32*[10];

type Point i32; // TEMP
type Buffer i32; // TEMP

type Coor utils.Point[2];
type MyType utils.Buffer*[2];

// -- struct types --
type Struct struct {
}

type S3 struct {
    i32[100] data;
    i32[12][12] board;
    i32 count;
    utils.Buffer bb;
}

type S4 struct {
    struct {
        i32 a;
        i32 b;
    }
    struct named {
        i32 c;
        i32 d;
    }
}

type S2 struct {
    i32 n;
    union choice {
        i32 b;
    }
    union oneOf {
        i32 a;
    }
    volatile u32 count;
    const i32 D;
}

type Data union {
    i32 bla;
    const char* text;
    u32 number;
}

// -- ENUMS --
type Enum1 enum u8 {
    VAR1, VAR2, VAR3,
}

type Enum2 enum i32 {
    VARB1 = 1, VARB2 = 5, VARB3 = 10
}

type Enum3 enum u32 {
    VARC1 = 1, VARC2 = 5,
}

type Enum4 enum u32 {
    VAR1D
    , VARD2 = 10
    , VARD3,
    VARD4
}

f32 pi = 3.1415926;

// -- Function --
type CallBack func i32(i32 a, utils.Point*p);
type CBFunc func void (MyType* mt, ...);
type CBFunc2 func void (const char* buffer, u8 t2, ...);

func void test1(i32 n) {}
func void test2(i32 n) {}

type Func1 func void(i32 a);
type Func2 func void(i32 a);

type Callback struct {
    Func1 cb;
}

func void myfunc(i32 a, ...) {}

func void myfunc2(i32 a = 10, i32 b = 20) {}

public func i32 main() {

    Func1 f = test1;
    Func2 g = test2;
    f = g;  // ok

    Func2 h = test2;
    f = h;  // ok
    f(20);

    myfunc(10, 20, 30, 40);
    myfunc2();
    return 0;
}

