module puzzle;

import stdio as io;
import stdlib local;

// TODO support const char* const (for string constants)
const char* ansi_BRED   = "\033[01;31m";
const char* ansi_BGREEN = "\033[01;32m";
const char* ansi_NORMAL = "\033[0m";

type Point enum i32 {
    A=0, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, MAX,
}

type Connection struct {
    Point src;
    Point dst;
    bool  otherDepth;
}

const Connection[] Connections = {
    { Point.A, Point.C, true },
    { Point.B, Point.A, true },
    { Point.C, Point.E, true }, { Point.C, Point.F, false },
    { Point.D, Point.A, true },
    { Point.D, Point.G, true },
    { Point.E, Point.I, false },
    { Point.F, Point.H, true },
    { Point.G, Point.H, true }, { Point.G, Point.I, true },
    { Point.J, Point.L, true },
    { Point.K, Point.J, true }, { Point.K, Point.L, true },
    { Point.M, Point.K, true }, { Point.M, Point.O, true },
    { Point.N, Point.Q, true },
    { Point.O, Point.N, true }, { Point.O, Point.R, true },
    { Point.P, Point.N, true },
    { Point.Q, Point.P, true },
    { Point.R, Point.B, true },
}

i32 startPoint;
i32 endPoint;
const i32 DEPTH_MAX = 10;
i32[Point.MAX*DEPTH_MAX] paths;    // value 0 is start, -1 not used, other is prev in path

func i32 index(Point p, i32 depth) { return p + Point.MAX * depth; }

func Point toPoint(i32 i) {
    //return (Point)(i%Point.MAX);
    return (i%Point.MAX);
}

func i32 toDepth(i32 i) { return (i/Point.MAX); }

func const char* print(i32 index2) {
    local char[16][4] buffer;
    local i32 idx = 0;
    idx = (idx + 1) % 4;
    i32 p = 'A' + toPoint(index2);
    io.sprintf(buffer[idx], "%c%d", p, toDepth(index2));
    return buffer[idx];
}

func void showPaths() {
    io.printf("depth   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R\n");
    for (i32 d=0; d<DEPTH_MAX; d++) {
        io.printf("%5d   ", d);
        for (i32 p=0; p<Point.MAX; p++) {
            //i32 idx = index((Point)p, d);
            i32 idx = index(p, d);
            i32 prev = paths[idx];
            if (idx == startPoint) io.printf("%s", ansi_BGREEN);
            if (idx == endPoint) io.printf("%s", ansi_BRED);
            if (prev == -1) io.printf("  ");
            else io.printf("%s", print(prev));
            if (d==0 && (p==Point.A || p==Point.J)) io.printf("%s", ansi_NORMAL);
            io.printf("  ");
        }
        io.printf("\n");
    }
}

func void tryPath(i32 cur, i32 next) {
    if (paths[next] == -1) {
        paths[next] = cur;
        listAdd(next);
    }
}

func i32 printPath(i32 idx) {
    i32 prev = paths[idx];
    i32 step = 0;
    if (prev != idx) step = printPath(prev) + 1;
    io.printf("  %2d %s\n", step, print(idx));
    return step;

}

public func i32 main(i32, const i8*[]) {
    // initialize paths
    for (i32 p=0; p<Point.MAX; p++) {
        for (i32 d=0; d<DEPTH_MAX; d++) {
            paths[index(p,d)] = -1;
            // C2 cannot properly handle CastOperator yet
            //paths[index((Point)p,d)] = -1;
        }
    }
    startPoint = index(Point.A, 0);
    endPoint = index(Point.J, 0);
    // add start point
    paths[startPoint] = 0;
    listAdd(startPoint);

    while (listSize()) {
        i32 idx = listGet();
        i32 prev = paths[idx];
        if (prev == -1) {
            io.printf("Error: path has no parent %s\n", print(idx));
            exit(-1);
        }
        Point curPoint = toPoint(idx);
        i32 curDepth = toDepth(idx);

        // follow all Connections, except incoming
        for (u32 c = 0; c<elemsof(Connections); c++) {
            const Connection* cc = &Connections[c];
            i32 next = -1;
            if (cc.src == curPoint) { // go down (or same)
                next = index(cc.dst, cc.otherDepth ? curDepth + 1 : curDepth);
                if (next == prev) continue;
                tryPath(idx, next);
            } else if (cc.dst == curPoint) { // go up (or same)
                next = index(cc.src, cc.otherDepth ? curDepth - 1 : curDepth);
                if (next == prev) continue;
                tryPath(idx, next);
            }
            if (next == endPoint) { // got destination
                listClear();
                break;
            }
        }
    }
    showPaths();
    if (paths[endPoint] == -1) {
        io.printf("No solution found\n");
    } else {
        io.printf("Found path:\n");
        printPath(endPoint);
    }

    return 0;
}

